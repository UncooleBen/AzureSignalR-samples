using Microsoft.AspNetCore.SignalR;
using Microsoft.Azure.SignalR.Samples.ReliableChatRoom.Entities;
using Microsoft.Azure.SignalR.Samples.ReliableChatRoom.Factory;
using Microsoft.Azure.SignalR.Samples.ReliableChatRoom.Handlers;
using Microsoft.Azure.SignalR.Samples.ReliableChatRoom.Storage;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.Azure.SignalR.Samples.ReliableChatRoom.Hubs
{
    public class ReliableChatRoomHub : Hub
    {
        private readonly IUserHandler _userHandler;
        private readonly IMessageStorage _messageStorage;
        private readonly IMessageFactory _messageFactory;
        private readonly IClientAckHandler _clientAckHandler;
        private readonly INotificationHandler _notificationHandler;

        private readonly DateTime _defaultDateTime = new DateTime(1970, 1, 1);


        public ReliableChatRoomHub(
            IUserHandler userHandler,
            IMessageStorage messageStorage,
            IMessageFactory messageFactory,
            IClientAckHandler clientAckHandler,
            INotificationHandler notificationHandler)
        {
            _userHandler = userHandler;
            _messageStorage = messageStorage;
            _messageFactory = messageFactory;
            _clientAckHandler = clientAckHandler;
            _notificationHandler = notificationHandler;
        }

        /// <summary>
        /// Hub method. Called everytime when client trys to log into hub with a new (or expired) session.
        /// </summary>
        /// <param name="deviceUuid">A random id of client device, used for notification service</param>
        /// <param name="username">The username of client</param>
        /// <returns></returns>
        public async Task EnterChatRoom(string deviceUuid, string username)
        {
            Console.WriteLine("EnterChatRoom device: {0} username: {1}", deviceUuid, username);
            
            //  Try to store user login information (ConnectionId & deviceUuid)
            Session session = _userHandler.Login(username, Context.ConnectionId, deviceUuid);
            
            //  If login was successful, broadcast the system message 
            if (session != null)
            {
                Message loginMessage = _messageFactory.CreateSystemMessage(username, "joined", DateTime.UtcNow);
                //  Do not store system messages. Directly send them out.
                await SendSystemMessage(loginMessage);
            }
        }

        /// <summary>
        /// Hub method. Called everytime when client trys to ping the server to extend his/her session and stay alive.
        /// </summary>
        /// <param name="deviceUuid">A random id of client device, used for notification service (may be a new id)</param>
        /// <param name="username">The username of client</param>
        /// <returns></returns>
        public async Task TouchServer(string deviceUuid, string username)
        {
            DateTime touchedDateTime = _userHandler.Touch(username, Context.ConnectionId, deviceUuid);
            if (touchedDateTime == _defaultDateTime) //  Session either does not exist or has expired
            {
                await Clients.Caller.SendAsync("expireSession", true);
            }
        }

        /// <summary>
        /// Hub method. Called when client explicitly quits the chat room.
        /// </summary>
        /// <param name="connectionId">The client's current connectionId</param>
        /// <returns></returns>
        public async Task LeaveChatRoom(string connectionId)
        {
            Console.WriteLine("LeaveChatRoom connectionId: {0}", connectionId);

            //  Do not care about logout result.
            Session session = _userHandler.Logout(connectionId);

            //  Broadcast the system message.
            Message logoutMessage = _messageFactory.CreateSystemMessage(session.Username, "left", DateTime.UtcNow);
            
            //  Do not store system messages. Directly send them out.
            await SendSystemMessage(logoutMessage);
        }

        /// <summary>
        /// Hub method. Called when client sends a broadcast message.
        /// </summary>
        /// <param name="messageId">The messageId generated by client side</param>
        /// <param name="sender">The client who send the message</param>
        /// <param name="payload">The message content. Can be string / binary object in base64</param>
        /// <returns></returns>
        public async Task OnBroadcastMessageReceived(string messageId, string sender, string payload)
        {
            Console.WriteLine("OnBroadcastMessageReceived {0} {1} {2}", messageId, sender, payload);

            //  Create message
            Message message = _messageFactory.CreateBroadcastMessage(messageId, sender, payload, DateTime.UtcNow);

            //  Try to store the message and execute a callback 
            Task<bool> storeTask = _messageStorage.TryStoreMessageAsync(message, SendBroadCastMessage);

            //  Send back a server ack regardless of whether is a duplicated message
            long receivedTimeInLong = CSharpDateTimeToJavaLong(message.SendTime);
            await Clients.Client(Context.ConnectionId).SendAsync("serverAck", message.MessageId, receivedTimeInLong);
        }

        /// <summary>
        /// Hub method. Called when client sends a private message.
        /// </summary>
        /// <param name="messageId">The messageId generated by client side</param>
        /// <param name="sender">The client who sends the message</param>
        /// <param name="receiver">The client who receives the message</param>
        /// <param name="payload">The message content. Can be string / binary object in base64</param>
        /// <returns></returns>
        public async Task OnPrivateMessageReceived(string messageId, string sender, string receiver, string payload)
        {

            Console.WriteLine("OnPrivateMessageReceive {0} {1} {2} {3}", messageId, sender, receiver, payload);
            
            //  Create message
            Message message = _messageFactory.CreatePrivateMessage(messageId, sender, receiver, payload, DateTime.UtcNow);

            //  Try to store the message and execute a callback 
            Task<bool> storeTask =  _messageStorage.TryStoreMessageAsync(message, SendPrivateMessage);

            //  Sender server ack back to client
            long receivedTimeInLong = CSharpDateTimeToJavaLong(message.SendTime);
            await Clients.Client(Context.ConnectionId).SendAsync("serverAck", message.MessageId, receivedTimeInLong);
        }

        /// <summary>
        /// Hub method. Called when client sends back an ACK on any message.
        /// </summary>
        /// <param name="clientAckId">The unique id representing a ClientAck object</param>
        public void OnAckResponseReceived(string clientAckId)
        {
            Console.WriteLine("OnAckResponseReceived clientAckId: {0}", clientAckId);
            
             //  Complete the waiting client ack object
            _clientAckHandler.Ack(clientAckId);
        }

        /// <summary>
        /// Hub method. Called when client broadcasts his/her read status on a specific message.
        /// ** Not supported yet **
        /// </summary>
        /// <param name="messageId">The messageId generated by client side</param>
        /// <param name="username">The username of the client</param>
        /// <returns></returns>
        public async Task OnReadResponseReceived(string messageId, string username)
        {
            Console.WriteLine(string.Format("OnReadResponseReceived messageId: {0}; username: {1}", messageId, username));
            
            //  Broadcast message read by user
            await Clients.All.SendAsync("setMessageRead", messageId, username);
        }

        /// <summary>
        /// Hub method. Called when client requests to pull his/her history message.
        /// </summary>
        /// <param name="username">The username of the client</param>
        /// <param name="untilTime">The latest message stored on the client. Any message
        /// after the untilTime will not be pulled</param>
        /// <returns></returns>
        public async Task OnPullHistoryMessagesReceived(string username, long untilTime)
        {
            Console.WriteLine(string.Format("OnPullHistoryMessageReceived username: {0}; until: {1}", username, untilTime));

            //  Convert java base client time to C# DateTime object
            var untilDateTime = JavaLongToCSharpDateTime(untilTime);

            //  Fetch history from message storage. After done, send them back with a callback method SendHistoryMessages.
            await _messageStorage.GetHistoryMessageAsync(username, untilDateTime, SendHistoryMessages);
        }

        /// <summary>
        /// Utility method. Sends the passed systemMessage.
        /// </summary>
        /// <param name="systemMessage">System message to send</param>
        /// <returns></returns>
        private async Task SendSystemMessage(Message systemMessage)
        {
            //  Broadcast to all other users
            await Clients.All.SendAsync("broadcastSystemMessage",
                    systemMessage.MessageId,
                    systemMessage.Text,
                    CSharpDateTimeToJavaLong(systemMessage.SendTime));
        }

        /// <summary>
        /// Utility method & Callback method of <see cref="IMessageStorage">. Sends broadcast message to clients other than sender
        /// </summary>
        /// <param name="broadcastMessage">Broadcast message to send</param>
        /// <param name="hubContext">IHubContext to call client methods</param>
        /// <returns>Task</returns>
        private async Task SendBroadCastMessage(Message broadcastMessage, IHubContext<ReliableChatRoomHub> hubContext)
        {
            //  Create a client ack 
            var clientAck = _clientAckHandler.CreateClientAck(broadcastMessage);

            //  Send notification first
            await _notificationHandler.SendBroadcastNotification(broadcastMessage);

            //  Broadcast to all other users
            await hubContext.Clients.AllExcept(_userHandler.GetUserSession(broadcastMessage.Sender).ConnectionId)
                    .SendAsync("displayBroadcastMessage",
                                broadcastMessage.MessageId,
                                broadcastMessage.Sender,
                                broadcastMessage.Receiver,
                                broadcastMessage.Text,
                                CSharpDateTimeToJavaLong(broadcastMessage.SendTime),
                                clientAck.ClientAckId);
        }

        /// <summary>
        /// Utility method & Callback method of <see cref="IMessageStorage">. Sends private message to the receiver client.
        /// </summary>
        /// <param name="privateMessage">Private message to send</param>
        /// <param name="hubContext">IHubContext to call client methods</param>
        /// <returns>Task</returns>
        private async Task SendPrivateMessage(Message privateMessage, IHubContext<ReliableChatRoomHub> hubContext)
        {
            //  Create a client ack 
            var clientAck = _clientAckHandler.CreateClientAck(privateMessage);

            //  Send notification first
            await _notificationHandler.SendPrivateNotification(privateMessage);

            //  Send to receiver then
            await hubContext.Clients.Client(_userHandler.GetUserSession(privateMessage.Receiver).ConnectionId)
                    .SendAsync("displayPrivateMessage",
                                privateMessage.MessageId,
                                privateMessage.Sender,
                                privateMessage.Receiver,
                                privateMessage.Text,
                                CSharpDateTimeToJavaLong(privateMessage.SendTime),
                                clientAck.ClientAckId);
        }

        /// <summary>
        /// Utility method & Callback method of <see cref="IMessageStorage">. Sends list of history messages to the requesting client.
        /// </summary>
        /// <param name="historyMessages">List of history messages to send back</param>
        /// <param name="hubContext">IHubContext to call client methods</param>
        /// <returns></returns>
        private async Task SendHistoryMessages(List<Message> historyMessages, IHubContext<ReliableChatRoomHub> hubContext)
        {
            //  Convert list of history messages to jsonString, then send to the client.
            await hubContext.Clients.Client(Context.ConnectionId)
                .SendAsync("addHistoryMessages", _messageFactory.ToJsonString(historyMessages));
        }

        /// <summary>
        /// Utility method. Converts java milliseconds in long to C# DateTime object
        /// </summary>
        /// <param name="milliseconds"></param>
        /// <returns></returns>
        private DateTime JavaLongToCSharpDateTime(long milliseconds)
        {
            long ticks = milliseconds * TimeSpan.TicksPerMillisecond + _defaultDateTime.Ticks;
            return new DateTime(ticks);
        }

        /// <summary>
        /// Utility method. Converts C# DateTime object to java milliseconds in long 
        /// </summary>
        /// <param name="dateTime"></param>
        /// <returns></returns>
        private long CSharpDateTimeToJavaLong(DateTime dateTime)
        {
            return (dateTime - _defaultDateTime).Ticks / TimeSpan.TicksPerMillisecond;
        }
    }
}
